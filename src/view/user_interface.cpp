// generated by Fast Light User Interface Designer (fluid) version 1.0304

#include "user_interface.hpp"

Fl_Menu_Item UserInterface::menu_menu_color_map[] = {
 {"Black and white", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Rainbow", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Red to white", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};
Fl_Menu_Item* UserInterface::option_black_white = UserInterface::menu_menu_color_map + 0;
Fl_Menu_Item* UserInterface::option_rainbow = UserInterface::menu_menu_color_map + 1;
Fl_Menu_Item* UserInterface::option_red_white = UserInterface::menu_menu_color_map + 2;

Fl_Double_Window* UserInterface::make_window() {
  { main_window = new Fl_Double_Window(1400, 1000, "Smoke");
    main_window->user_data((void*)(this));
    { gl_window = new GlWindow(0, 0, 1000, 1000);
      gl_window->box(FL_NO_BOX);
      gl_window->color(FL_BACKGROUND_COLOR);
      gl_window->selection_color(FL_BACKGROUND_COLOR);
      gl_window->labeltype(FL_NO_LABEL);
      gl_window->labelfont(0);
      gl_window->labelsize(14);
      gl_window->labelcolor(FL_FOREGROUND_COLOR);
      gl_window->align(Fl_Align(FL_ALIGN_CENTER));
      gl_window->when(FL_WHEN_RELEASE);
    } // GlWindow* gl_window
    { separator = new Fl_Box(1000, 0, 10, 1000, "separator");
      separator->box(FL_FLAT_BOX);
      separator->color((Fl_Color)44);
      separator->labeltype(FL_NO_LABEL);
    } // Fl_Box* separator
    { color_bar = new ColorBar(1010, 70, 40, 800);
      color_bar->box(FL_ENGRAVED_BOX);
      color_bar->color(FL_BACKGROUND_COLOR);
      color_bar->selection_color(FL_BACKGROUND_COLOR);
      color_bar->labeltype(FL_NORMAL_LABEL);
      color_bar->labelfont(0);
      color_bar->labelsize(14);
      color_bar->labelcolor(FL_FOREGROUND_COLOR);
      color_bar->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
      color_bar->when(FL_WHEN_RELEASE);
    } // ColorBar* color_bar
    { text_toggle = new Fl_Box(1135, 50, 200, 20, "Toggle");
      text_toggle->labelfont(1);
    } // Fl_Box* text_toggle
    { toggle_dir_color = new Fl_Button(1135, 130, 200, 20, "Toggle direction colour");
    } // Fl_Button* toggle_dir_color
    { toggle_draw_smoke = new Fl_Button(1135, 90, 200, 20, "Toggle smoke");
    } // Fl_Button* toggle_draw_smoke
    { toggle_draw_vecs = new Fl_Button(1135, 110, 200, 20, "Toggle vectors");
    } // Fl_Button* toggle_draw_vecs
    { toggle_frozen = new Fl_Button(1135, 70, 200, 20, "Toggle play");
    } // Fl_Button* toggle_frozen
    { text_scalar_col = new Fl_Box(1135, 170, 200, 20, "Color mapping");
      text_scalar_col->labelfont(1);
    } // Fl_Box* text_scalar_col
    { menu_color_map = new Fl_Choice(1135, 190, 200, 20);
      menu_color_map->down_box(FL_BORDER_BOX);
      menu_color_map->menu(menu_menu_color_map);
    } // Fl_Choice* menu_color_map
    { text_increase_decrease = new Fl_Box(1135, 230, 200, 16, "Increase/decrease values");
      text_increase_decrease->labelfont(1);
    } // Fl_Box* text_increase_decrease
    { counter_time_step = new Fl_Counter(1135, 264, 200, 21, "Time step");
      counter_time_step->align(Fl_Align(FL_ALIGN_TOP));
      counter_time_step->step(0.001, 0.01);
      counter_time_step->value(Config::time_step);
      counter_time_step->bounds(0.001,1);
    } // Fl_Counter* counter_time_step
    { counter_visc = new Fl_Counter(1135, 304, 200, 21, "Viscosity");
      counter_visc->type(1);
      counter_visc->align(Fl_Align(FL_ALIGN_TOP));
      counter_visc->value(Config::visc);
      counter_visc->step(0.00025);
      counter_visc->bounds(0.0001,0.02);
    } // Fl_Counter* counter_visc
    { counter_vec_scale = new Fl_Counter(1135, 344, 200, 21, "Vector scaling");
      counter_vec_scale->type(1);
      counter_vec_scale->align(Fl_Align(FL_ALIGN_TOP));
      counter_vec_scale->value(Config::vec_scale);
      counter_vec_scale->step(200);
    } // Fl_Counter* counter_vec_scale
    { counter_num_glyphs = new Fl_Counter(1135, 384, 200, 21, "counter:");
      counter_num_glyphs->align(Fl_Align(FL_ALIGN_TOP));
      counter_num_glyphs->step(1, 10);
      counter_num_glyphs->value(Config::num_glyphs);
    } // Fl_Counter* counter_num_glyphs
    main_window->end();
  } // Fl_Double_Window* main_window
  return main_window;
}

void UserInterface::show() {
  main_window->show();
}
